// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: object_storage.proto

package storagepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ObjectStorage_Upload_FullMethodName = "/proto.ObjectStorage/Upload"
	ObjectStorage_Get_FullMethodName    = "/proto.ObjectStorage/Get"
)

// ObjectStorageClient is the client API for ObjectStorage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ObjectStorageClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ObjectInfo, ObjectUploadStatus], error)
	Get(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ObjectInfo], error)
}

type objectStorageClient struct {
	cc grpc.ClientConnInterface
}

func NewObjectStorageClient(cc grpc.ClientConnInterface) ObjectStorageClient {
	return &objectStorageClient{cc}
}

func (c *objectStorageClient) Upload(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ObjectInfo, ObjectUploadStatus], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ObjectStorage_ServiceDesc.Streams[0], ObjectStorage_Upload_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ObjectInfo, ObjectUploadStatus]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ObjectStorage_UploadClient = grpc.ClientStreamingClient[ObjectInfo, ObjectUploadStatus]

func (c *objectStorageClient) Get(ctx context.Context, in *ObjectRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ObjectInfo], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ObjectStorage_ServiceDesc.Streams[1], ObjectStorage_Get_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ObjectRequest, ObjectInfo]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ObjectStorage_GetClient = grpc.ServerStreamingClient[ObjectInfo]

// ObjectStorageServer is the server API for ObjectStorage service.
// All implementations must embed UnimplementedObjectStorageServer
// for forward compatibility.
type ObjectStorageServer interface {
	Upload(grpc.ClientStreamingServer[ObjectInfo, ObjectUploadStatus]) error
	Get(*ObjectRequest, grpc.ServerStreamingServer[ObjectInfo]) error
	mustEmbedUnimplementedObjectStorageServer()
}

// UnimplementedObjectStorageServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedObjectStorageServer struct{}

func (UnimplementedObjectStorageServer) Upload(grpc.ClientStreamingServer[ObjectInfo, ObjectUploadStatus]) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedObjectStorageServer) Get(*ObjectRequest, grpc.ServerStreamingServer[ObjectInfo]) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedObjectStorageServer) mustEmbedUnimplementedObjectStorageServer() {}
func (UnimplementedObjectStorageServer) testEmbeddedByValue()                       {}

// UnsafeObjectStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObjectStorageServer will
// result in compilation errors.
type UnsafeObjectStorageServer interface {
	mustEmbedUnimplementedObjectStorageServer()
}

func RegisterObjectStorageServer(s grpc.ServiceRegistrar, srv ObjectStorageServer) {
	// If the following call pancis, it indicates UnimplementedObjectStorageServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ObjectStorage_ServiceDesc, srv)
}

func _ObjectStorage_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ObjectStorageServer).Upload(&grpc.GenericServerStream[ObjectInfo, ObjectUploadStatus]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ObjectStorage_UploadServer = grpc.ClientStreamingServer[ObjectInfo, ObjectUploadStatus]

func _ObjectStorage_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObjectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ObjectStorageServer).Get(m, &grpc.GenericServerStream[ObjectRequest, ObjectInfo]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ObjectStorage_GetServer = grpc.ServerStreamingServer[ObjectInfo]

// ObjectStorage_ServiceDesc is the grpc.ServiceDesc for ObjectStorage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ObjectStorage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ObjectStorage",
	HandlerType: (*ObjectStorageServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _ObjectStorage_Upload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Get",
			Handler:       _ObjectStorage_Get_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "object_storage.proto",
}
